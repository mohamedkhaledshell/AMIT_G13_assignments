
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  0000019e  00000212  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009dd  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ae  00000000  00000000  00000cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a1  00000000  00000000  00001367  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001708  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000367  00000000  00000000  0000178c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000368  00000000  00000000  00001af3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001e5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e9       	ldi	r30, 0x9E	; 158
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 c3 00 	call	0x186	; 0x186 <main>
  7a:	0c 94 cd 00 	jmp	0x19a	; 0x19a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_command>:
}

void LCD_command(char cmd)
{
	//A4 ~A7 data pins of LCD
	LCD_PORT = (LCD_PORT & 0x0F) | (cmd & 0xF0); //masking
  82:	9b b3       	in	r25, 0x1b	; 27
  84:	9f 70       	andi	r25, 0x0F	; 15
  86:	28 2f       	mov	r18, r24
  88:	20 7f       	andi	r18, 0xF0	; 240
  8a:	92 2b       	or	r25, r18
  8c:	9b bb       	out	0x1b, r25	; 27
	//RS PB1 RW PB2 E PB3
	LCD_CTRL&=~(1<<RS);
  8e:	c1 98       	cbi	0x18, 1	; 24
	LCD_CTRL|=(1<<E);
  90:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	35 e3       	ldi	r19, 0x35	; 53
  94:	3a 95       	dec	r19
  96:	f1 f7       	brne	.-4      	; 0x94 <LCD_command+0x12>
  98:	00 00       	nop
	_delay_us(10); // micro second
	LCD_CTRL&=~(1<<E);
  9a:	c3 98       	cbi	0x18, 3	; 24
  9c:	ef e3       	ldi	r30, 0x3F	; 63
  9e:	ff e1       	ldi	r31, 0x1F	; 31
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <LCD_command+0x1e>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <LCD_command+0x24>
  a6:	00 00       	nop
	
	_delay_us(2000);
	LCD_PORT= (LCD_PORT & 0x0F) | (cmd << 4);
  a8:	2b b3       	in	r18, 0x1b	; 27
  aa:	2f 70       	andi	r18, 0x0F	; 15
  ac:	f0 e1       	ldi	r31, 0x10	; 16
  ae:	8f 9f       	mul	r24, r31
  b0:	c0 01       	movw	r24, r0
  b2:	11 24       	eor	r1, r1
  b4:	82 2b       	or	r24, r18
  b6:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL|=(1<<E);
  b8:	c3 9a       	sbi	0x18, 3	; 24
  ba:	35 e3       	ldi	r19, 0x35	; 53
  bc:	3a 95       	dec	r19
  be:	f1 f7       	brne	.-4      	; 0xbc <LCD_command+0x3a>
  c0:	00 00       	nop
	_delay_us(10); // micro second
	LCD_CTRL&=~(1<<E);
  c2:	c3 98       	cbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	8f e3       	ldi	r24, 0x3F	; 63
  c6:	9c e9       	ldi	r25, 0x9C	; 156
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <LCD_command+0x46>
  cc:	00 c0       	rjmp	.+0      	; 0xce <LCD_command+0x4c>
  ce:	00 00       	nop
  d0:	08 95       	ret

000000d2 <LCD_init>:


void LCD_init()
{
	//direction of data pins
	LCD_Dir|=0xF0;//A4~A7 are output
  d2:	8a b3       	in	r24, 0x1a	; 26
  d4:	80 6f       	ori	r24, 0xF0	; 240
  d6:	8a bb       	out	0x1a, r24	; 26
	//direction of control pins
	LCD_CTRL_Dir|=(1<<RS)|(1<<RW)|(1<<E);
  d8:	87 b3       	in	r24, 0x17	; 23
  da:	8e 60       	ori	r24, 0x0E	; 14
  dc:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL&=~(1<<RW);//write mode
  de:	c2 98       	cbi	0x18, 2	; 24
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	89 ef       	ldi	r24, 0xF9	; 249
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <LCD_init+0x14>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <LCD_init+0x1e>
  f0:	00 00       	nop
	_delay_ms(20);
	//initialize procedure
	LCD_command(0x33);
  f2:	83 e3       	ldi	r24, 0x33	; 51
  f4:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
	LCD_command(0x32);
  f8:	82 e3       	ldi	r24, 0x32	; 50
  fa:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
	LCD_command(0x28);
  fe:	88 e2       	ldi	r24, 0x28	; 40
 100:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
	LCD_command(0x0C);//display on, cursor off
 104:	8c e0       	ldi	r24, 0x0C	; 12
 106:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
	LCD_command(0x06);// entry mode
 10a:	86 e0       	ldi	r24, 0x06	; 6
 10c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
	LCD_command(0x01);//clear
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
 116:	08 95       	ret

00000118 <LCD_char>:
}


void LCD_char(char data)
{
	LCD_PORT = (LCD_PORT & 0x0F) | (data & 0xF0); //masking
 118:	9b b3       	in	r25, 0x1b	; 27
 11a:	9f 70       	andi	r25, 0x0F	; 15
 11c:	28 2f       	mov	r18, r24
 11e:	20 7f       	andi	r18, 0xF0	; 240
 120:	92 2b       	or	r25, r18
 122:	9b bb       	out	0x1b, r25	; 27
	LCD_CTRL|=(1<<RS);//data register
 124:	c1 9a       	sbi	0x18, 1	; 24
	LCD_CTRL|=(1<<E);
 126:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	35 e3       	ldi	r19, 0x35	; 53
 12a:	3a 95       	dec	r19
 12c:	f1 f7       	brne	.-4      	; 0x12a <LCD_char+0x12>
 12e:	00 00       	nop
	_delay_us(10);
	LCD_CTRL&=~(1<<E);
 130:	c3 98       	cbi	0x18, 3	; 24
 132:	ef e3       	ldi	r30, 0x3F	; 63
 134:	ff e1       	ldi	r31, 0x1F	; 31
 136:	31 97       	sbiw	r30, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <LCD_char+0x1e>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <LCD_char+0x24>
 13c:	00 00       	nop
	_delay_us(2000);
	LCD_PORT= (LCD_PORT & 0x0F) | (data << 4);
 13e:	2b b3       	in	r18, 0x1b	; 27
 140:	2f 70       	andi	r18, 0x0F	; 15
 142:	f0 e1       	ldi	r31, 0x10	; 16
 144:	8f 9f       	mul	r24, r31
 146:	c0 01       	movw	r24, r0
 148:	11 24       	eor	r1, r1
 14a:	82 2b       	or	r24, r18
 14c:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL|=(1<<E);
 14e:	c3 9a       	sbi	0x18, 3	; 24
 150:	35 e3       	ldi	r19, 0x35	; 53
 152:	3a 95       	dec	r19
 154:	f1 f7       	brne	.-4      	; 0x152 <LCD_char+0x3a>
 156:	00 00       	nop
	_delay_us(10); // micro second
	LCD_CTRL&=~(1<<E);
 158:	c3 98       	cbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	8f e3       	ldi	r24, 0x3F	; 63
 15c:	9c e9       	ldi	r25, 0x9C	; 156
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <LCD_char+0x46>
 162:	00 c0       	rjmp	.+0      	; 0x164 <LCD_char+0x4c>
 164:	00 00       	nop
 166:	08 95       	ret

00000168 <LCD_string>:
	_delay_ms(10);
}
void LCD_string(char* str)
{
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	ec 01       	movw	r28, r24
	int i =0;
	while(str[i]!='\0')
 16e:	88 81       	ld	r24, Y
 170:	88 23       	and	r24, r24
 172:	31 f0       	breq	.+12     	; 0x180 <LCD_string+0x18>
 174:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_char(str[i]);
 176:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_char>
	_delay_ms(10);
}
void LCD_string(char* str)
{
	int i =0;
	while(str[i]!='\0')
 17a:	89 91       	ld	r24, Y+
 17c:	81 11       	cpse	r24, r1
 17e:	fb cf       	rjmp	.-10     	; 0x176 <LCD_string+0xe>
	{
		LCD_char(str[i]);
		i++;
	}
}
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <main>:

#include "lcd.h"
int main(void)
{
    /* Replace with your application code */
	LCD_init();
 186:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_init>
	LCD_command(0x80);
 18a:	80 e8       	ldi	r24, 0x80	; 128
 18c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
	LCD_string("shell");
 190:	80 e6       	ldi	r24, 0x60	; 96
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_string>
 198:	ff cf       	rjmp	.-2      	; 0x198 <main+0x12>

0000019a <_exit>:
 19a:	f8 94       	cli

0000019c <__stop_program>:
 19c:	ff cf       	rjmp	.-2      	; 0x19c <__stop_program>
